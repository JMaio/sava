package software.sava.core.tx;

import org.junit.jupiter.api.Test;
import software.sava.core.accounts.PublicKey;
import software.sava.core.accounts.lookup.AddressLookupTable;
import software.sava.core.accounts.meta.AccountMeta;
import software.sava.core.accounts.meta.LookupTableAccountMeta;

import java.util.*;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;
import static software.sava.core.accounts.PublicKey.fromBase58Encoded;
import static software.sava.core.accounts.meta.AccountMeta.*;
import static software.sava.core.programs.Discriminator.toDiscriminator;

final class TransactionSerializationTests {

  @Test
  void testVariableLengthIxLength() {
    // 284yj6foQU2HDuFTfxPuiHb67vQ8vRB3oqqebAkQfVHR2sFwyuK1EHhvG4udEfsdt3xshttFmX66gKgg1Utp6RZ9
    final byte[] data = Base64.getDecoder().decode("""
        ATgc2Iye/GlwnpSeIytu+tYkb2A+5VJhc1yui59+7/PMQSuywEqpb3k8wHCKnupEuC5fDTUjvGhASTEH5c90UACAAQAFEU4rs4al2vatnKR6MtsLLzl+Q24T1Y5kkYBmPhrq9O/VzcyvadLTPMXTLHJ2IKteqvqoQAgRH4dVHOW+cw1EkNOJB31VpbsTMHY+t2f1XsB3tBoNB1994dc/uso8Y9VUcRCcPGXQaDMBtOvEnG0Lyr4Lf68erOMMjG6weDn4HuIS6tSjkUAFDNLqypEZqieck8DZMKBobFJb3fYlMJjWpjHvHv25qj1olz/ZenFlAVmw6stGZYC5aF5nQ9ZqQr8vxXTXpuq5/UeOzPqvqL7sJuBwFgO//vEZG9uw6edrxAd2vInnwNHlA4uvk7TwFNJd9xWnndlfBJ5f9fX36m+JwJ9fAlkt3jAFytFpv8wnPC/6I0tpd+F+Bw3UOdTTA8X8HR7XL/DvxwiqYIadWSBAIms1hbo9KoaOYES91ZtNIF/jeSWG+N64PtIqGyqU3OdPOEd0TTjj79CJx+HICgFkwRrNq0B12gG6uYd+a79dybCsJPRSedzSl8R6nwJYXSLJGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjJclj04kifG7PRApFI4NgwtaE5na/xCEBI572Nvp+FkDBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAJWBt/6PKcF0R86zH0ytUdAc7K5LbdbpdsVcWwvkMUGK86EED9glv4WMHdJchvP2ZZvDPQq6PniaYqUsrsmZ94ETjVRi2k6UWSxzbmoMl/cGeYhlpwGEqRE3YD3BBue3swYOAAUCgE8SAA4ABQEAAAIADgAJAyKiAAAAAAAADwYdDAABFg0IllUsHJUO0hoPHQACAwwREhMUARUWFx0eGBkEHxogGxwFBgcICQoLigEyEHMzqHo5LQIAAAACAAAAAAECAAAAAgEDAAAABBIAAAAEBQQGBwIICQoLBAAMDA0ODxABCQAAABEMEhMUFQgCAAQSAAAABBYEFxgCCAoJGQQADAwNGhscCAAAABAnTB2IE8QJ6ANkAAoAAQC0ZeZpAAAAAFDDAAAAAAAAAAAAAAAAAAAAAAAAAAAQAB9Qb3dlcmVkIGJ5IGJsb1hyb3V0ZSBUcmFkZXIgQXBpAonsVzlUh3H7+XOmaklk0KWZm+wt34ECwzGrxcB6Sb7VCQRLSE8FSUpRTgQMAgsHmoTIVF9hkZWFmpxCqc8zcavo9Yu6S8ysQBz59/7iw1ADVllVAA==""");
    final var skeleton = TransactionSkeleton.deserializeSkeleton(data);

    assertEquals(1, skeleton.numSigners());
    assertEquals(0, skeleton.numReadonlySignedAccounts());
    final var signerAccounts = skeleton.parseSignerAccounts();
    final var signerKeys = skeleton.parseSignerPublicKeys();
    for (int i = 0; i < signerKeys.length; ++i) {
      assertEquals(signerAccounts[i].publicKey(), signerKeys[i]);
    }

    var instructions = skeleton.parseInstructionsWithoutTableAccounts();
    assertEquals(6, instructions.length);
    var ix = instructions[4];
    assertEquals("B4cUJzpPVNKdnjnN7x7MhhXzJT5Z9SpteFp3JK3Y7bow", ix.programId().publicKey().toBase58());
    assertEquals(138, ix.len());

    ix = instructions[5];
    assertEquals("HQ2UUt18uJqKaQFJhgV9zaTdQxUZjNrsKFgoEDquBkcx", ix.programId().publicKey().toBase58());
    assertEquals(31, ix.len());

    final var lookupTables = skeleton.lookupTableAccounts();
    assertEquals(2, lookupTables.length);
    var tableAccount = lookupTables[0];
    assertEquals("AHPsnG22z2BwdeURWWPPQzLYRb6jT9PPDXzQ3hMF7hNc", tableAccount.toBase58());
    tableAccount = lookupTables[1];
    assertEquals("BQBDhjQ32VYzNzXW8vViqpuLiz2TAYcW1cVZDAL4Hf67", tableAccount.toBase58());

    final var accounts = skeleton.parseAccounts();
    assertEquals(signerAccounts[0], accounts[0]);
    assertEquals(signerAccounts[0].publicKey(), skeleton.feePayer());

    for (int i = 0; i < 3; ++i) {
      ix = instructions[i];
      final var discriminator = toDiscriminator(ix.discriminator(1));
      var instructionArray = skeleton.filterInstructions(accounts, discriminator);
      assertEquals(1, instructionArray.length);
      assertEquals(ix, instructionArray[0]);
    }

    for (int i = 3; i < instructions.length; ++i) {
      ix = instructions[i];
      final var discriminator = toDiscriminator(ix.discriminator(8));
      var instructionArray = skeleton.filterInstructions(accounts, discriminator);
      assertEquals(1, instructionArray.length);
      assertEquals(ix, instructionArray[0]);
    }

    instructions = skeleton.parseInstructionsWithoutAccounts();
    for (int i = 0; i < 3; ++i) {
      ix = instructions[i];
      final var discriminator = toDiscriminator(ix.discriminator(1));
      var instructionArray = skeleton.filterInstructionsWithoutAccounts(discriminator);
      assertEquals(1, instructionArray.length);
      assertEquals(ix, instructionArray[0]);
    }

    for (int i = 3; i < instructions.length; ++i) {
      ix = instructions[i];
      final var discriminator = toDiscriminator(ix.discriminator(8));
      var instructionArray = skeleton.filterInstructionsWithoutAccounts(discriminator);
      assertEquals(1, instructionArray.length);
      assertEquals(ix, instructionArray[0]);
    }
  }

  private void testMultipleLookupTables(final TransactionSkeleton skeleton,
                                        final Map<PublicKey, AddressLookupTable> lookupTableMap) {
    assertEquals(1, skeleton.numSigners());
    assertEquals(0, skeleton.numReadonlySignedAccounts());

    assertEquals(lookupTableMap.size(), skeleton.lookupTableAccounts().length);
    for (final var lut : skeleton.lookupTableAccounts()) {
      assertTrue(lookupTableMap.containsKey(lut));
    }

    lookupTableMap.values().forEach(table -> assertTrue(table.isActive()));

    final var signerAccounts = skeleton.parseSignerAccounts();
    final var signerKeys = skeleton.parseSignerPublicKeys();
    for (int i = 0; i < signerKeys.length; ++i) {
      assertEquals(signerAccounts[i].publicKey(), signerKeys[i]);
    }

    final var accountMetas = skeleton.parseAccounts(lookupTableMap);
    assertEquals(signerAccounts[0], accountMetas[0]);
    assertEquals(signerAccounts[0].publicKey(), skeleton.feePayer());

    assertEquals(44, accountMetas.length);
    final var feePayer = accountMetas[0];
    assertEquals(createFeePayer(fromBase58Encoded("Ee7oGQLorSg8tapxb4ym7Y7vAZUuYHMZEgC6boQQJrcP")), feePayer);
    assertEquals(createWrite(fromBase58Encoded("7u7cD7NxcZEuzRCBaYo8uVpotRdqZwez47vvuwzCov43")), accountMetas[1]);
    assertEquals(createInvoked(fromBase58Encoded("11111111111111111111111111111111")), accountMetas[13]);
    assertEquals(createInvoked(fromBase58Encoded("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")), accountMetas[17]);
    assertEquals(createRead(fromBase58Encoded("BQ72nSv9f3PRyRKCBnHLVrerrv37CYTHm5h3s9VSGQDV")), accountMetas[18]);
    assertEquals(createRead(fromBase58Encoded("EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v")), accountMetas[20]);
    assertEquals(createWrite(fromBase58Encoded("4Ep5XNqaDYbFAQHHdhtFXgaPuhDH6uajSG8ZfwxHzwBQ")), accountMetas[21]);
    assertEquals(createWrite(fromBase58Encoded("E4W3xuwX692AuEjx35hKXwk4YZVpvsd2bZdkMvX4TuAR")), accountMetas[34]);
    assertEquals(createRead(fromBase58Encoded("2wT8Yq49kHgDzXuPxZSaeLaH1qbmGXtEyPy64bL7aD3c")), accountMetas[35]);
    assertEquals(createRead(fromBase58Encoded("So11111111111111111111111111111111111111112")), accountMetas[43]);

    final var instructions = skeleton.parseInstructions(accountMetas);
    validateInstructions(instructions);

    final var lookupTableMetas = Arrays.stream(skeleton.lookupTableAccounts())
        .map(lookupTableMap::get)
        .map(LookupTableAccountMeta::createMeta)
        .toArray(LookupTableAccountMeta[]::new);

    final var transaction = Transaction.createTx(feePayer, Arrays.asList(instructions), lookupTableMetas);
    assertEquals(skeleton.version(), transaction.version());
    assertEquals(skeleton.numSigners(), transaction.numSigners());

    final var instructions2 = transaction.instructions();
    assertEquals(instructions.length, instructions2.size());

    transaction.setRecentBlockHash(skeleton.base58BlockHash());
    final var serializedTx = transaction.serialized();
    assertEquals(skeleton.data().length, serializedTx.length);

    final var skeleton2 = TransactionSkeleton.deserializeSkeleton(serializedTx);
    assertEquals(skeleton.base58BlockHash(), skeleton2.base58BlockHash());
    assertEquals(skeleton.version(), skeleton2.version());
    assertEquals(skeleton.numSigners(), skeleton2.numSigners());

    final var accountMetas2 = skeleton2.parseAccounts(lookupTableMap);
    assertEquals(feePayer, accountMetas2[0]);
    assertEquals(
        Arrays.stream(accountMetas)
            .sorted(Comparator.comparing(AccountMeta::publicKey))
            .toList(),
        Arrays.stream(accountMetas2)
            .sorted(Comparator.comparing(AccountMeta::publicKey))
            .toList()
    );

    final var accounts = Arrays.stream(instructions)
        .map(Instruction::accounts)
        .flatMap(List::stream)
        .toList();
    final var accounts2 = instructions2.stream()
        .map(Instruction::accounts)
        .flatMap(List::stream)
        .toList();
    assertEquals(accounts, accounts2);

    final var instructions3 = skeleton2.parseInstructions(accountMetas2);
    validateInstructions(instructions3);

    assertEquals(instructions2, Arrays.asList(instructions3));

    final var accounts3 = Arrays.stream(instructions3)
        .map(Instruction::accounts)
        .flatMap(List::stream)
        .toList();
    assertEquals(accounts, accounts3);
  }


  @Test
  void testMultipleLookupTables() {
    final var decoder = Base64.getDecoder();
    final byte[] txData = decoder.decode("ARRw8IKW5g68p4JJly8WK0FeERS1fM8oT768hiqhTUrPKVHA4J3MBvvwB66GG89jl9y58uuLU/d/n5feDm4zQwWAAQAIFcqqGywepKTH2miwSZYlM16b9eL6wOUsHXTJaN/PC3HgZn/LU4VSNrEZJg9hJjEvfwMjmNLCvJDpEyG0zH7Y1yRxM32R3yvnX/HBzojB9fApPOfuRWL27j4EX6B/qtMR3XhSHLF5zruFibVWotXslNJJhoL9+bsq9a1k5JHMQVPajH0GWPl/GBdrvsyAB5oM/DmI+Zim1wtJQfiwcEBhFzuUgNyv8Vh5jpvncwqzug9EmaNqS45ePcJKtUQiZPlalJsmP4XXkRUa4+mVUmtqiwBVOG/QonNYNeS6dAGAu/3DqrPZuTBfiy3tOi8VNLMXUE+81x/vGukWDpnYFI3QNg+w7x9VxI11rNstskEtkvrc5QLhZQOukJJeNJk94SA2P7NrsyJHdN8r61t9/sUBVZUA442cNIW1DRpGPYY4a2gc1iOzs8gYW9R6p6JGvSdImG/6cHUvETiJ/1E3vnj4qH3YZtww6EGz12R/jfuL2SSQ+eiarZ25MhB4xt6Laek7DtrMTZNG4CL8qwpNHlcIBHj7kn2An7H7CibSAoGDAb+EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAAR51VvyMcBu7nTFbs5oFQf9sbLeo/SOUQKxzaJWvBOPBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKmMlyWPTiSJ8bs9ECkUjg2DC1oTmdr/EIQEjnvY2+n4WZqAC/9MhzaIlsIPwUBz6/HLWqN1/oH+Tb3IK6Tft154tD/6J/XX9kp0wJsfKVh53ksJqzbfyd1RSzIap7OM5ejG+nrzvtutOj1l82qryXQxsbvkwtL24OR8pgIDRS9dYb3DM82VQy2lvZ9Qvf6uHNlQm3hqNgBIjxRpPlzIfSsyBw4ABQIVkgYAEQYACwArDRABAQ0CAAsMAgAAAOgqAAAAAAAAEAELAREPQhASAAsCAQorFAwPEw8oISgfIAIJKisiKBIQECkoBwYFDygeKBsaCQgqJx0oEhAQKSgEHA8jJBYSCAEVFxgZECYmJSzBIJszQdacgQIDAAAAJmQAASZkAQIZZAID6CoAAAAAAADPBgAAAAAAAEYAFBADCwAAAQkNAgADDAIAAADoAwAAAAAAAAP0NIJPcZr9hSIT6pDVuJOcbRK/6LTNqsuEbqKZDXrYfgVgWl5iWwRhY19dkmh5SwRhhBKoWpjF2AJWdmNKtd10oVa1ARee8ZKsxDUFPj88QBcEFjsYPUZ44JFRsIq/hqRW5K1MXfzQWSrJGK/c9uGPL+lhu51GBD9CPT4BLg==");
    final var skeleton = TransactionSkeleton.deserializeSkeleton(txData);

    assertEquals("DmkhBgQnEMFRou2j5qYUvXvvv46pBwaCcbTXPAu5HYZP", skeleton.base58BlockHash());

    final var tableData = Map.of(
        fromBase58Encoded("HSGvDUXpsitvzxwKfFGuUXDqkwwmHKuKFefKZrihWwXs"), "",
        fromBase58Encoded("ArWvRMTGQwouxpVd38MZnTJoCxJP6Y8SE6dyQzTJYe5r"), "AQAAAP//////////6nXOEAAAAAAsAX0Oo0JAUwU7u9hg90wy8EvD3Icq35pPTtFwwk7g9D7TAABL2UnENgLDPyB3kO0Wo1JMobmXXPEhoqkM/+x9+LaKzR4pnX/Ol0074fIMVHsp1qN0eXTcnR2NpxNfQjnWIh/LQVewWA8xxfzkSmJYLbz5147nWUOghKOTs1A2jSKJkwgG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqbgQWY0jcbUz5O830lOcj1aZOhfdjdDsAlJv/Ht82/VMN2WbiSxikOfdHGTRFCVpeOG9omnEwasuGJF511tmwcr6kErV6iqoIuhaFqnPGbOBDg9Zq0o9IGqigWqA5r42j0vZScQ2AsM/IHeQ7RajUkyhuZdc8SGiqQz/7H34torNBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKlBV7BYDzHF/ORKYlgtvPnXjudZQ6CEo5OzUDaNIomTCM7HqPo9PJpZFz64LkFqf8jGkd/MYlDAHZLKs2VLozNaUw5NBojk//w1ZCrLYzeh937qnl7pl1fdn8+3FEU1Qg5L2UnENgLDPyB3kO0Wo1JMobmXXPEhoqkM/+x9+LaKzXrOfCIrsL8/4XueitIhRQSfLr/NXYMeZeb4FawJ4nkxBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKnmebmtyoIvQ5w3NfL8d48Xk6D+w90Q/czuBQNd2C9Uf/SS7jofgXoXH27wRala/OyZIlfQYv6MoOmwXSMsCxBwQVewWA8xxfzkSmJYLbz5147nWUOghKOTs1A2jSKJkwgG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqUFXsFgPMcX85EpiWC28+deO51lDoISjk7NQNo0iiZMIrZyNIkrI5UTxUrbqAAtrVKzP4bKIRs+ITyPIMV5vhrhL2UnENgLDPyB3kO0Wo1JMobmXXPEhoqkM/+x9+LaKzQR52cfMEDXechH5nrSMCdcLK99b354uVrih+7Wi6jMn62DBwd8dh7IKn751kjGAW4WL15Q7bnQ/YrG8VAp8lkSycNZ/qYxRzwITBRNYliuvNXQr7VnJ2URenA0MhcfNkQbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpQRYxGhzaO7HVMZ9wwQoC3Kor1q+8j7FsSehsV2OjkWpBV7BYDzHF/ORKYlgtvPnXjudZQ6CEo5OzUDaNIomTCEvZScQ2AsM/IHeQ7RajUkyhuZdc8SGiqQz/7H34torNPB9QzG4l51g92qo/1BfXQwygoixgoyIDArJTVO+CKxkTkBE21xkljmYDio/0AFHOLoXuqlIU7OMBYr2NtZ0RU17P12u5GyVvabJNOXLInehZeviWwXwZx3ogCKR/eA7bQVewWA8xxfzkSmJYLbz5147nWUOghKOTs1A2jSKJkwgG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqYUZobbuclVOw6TSq+sRGt8GaJmjoYllW6HONaKkK72zS9lJxDYCwz8gd5DtFqNSTKG5l1zxIaKpDP/sffi2is0Mdr3N0q12pW1EQgzWOVRC+gRPZNFIxFSe/IuggfUibhUQUh/7vZIL9IvpKx6+aF+ZfAdZT9H9lvLP2XbkRHZSqgEx8voO1wfyXQWefZFFaZ/UNyak587qYtzGHcghFp0G3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqUFXsFgPMcX85EpiWC28+deO51lDoISjk7NQNo0iiZMIK65MJkkZEvW31VeVjKDvAyDCaO8nDiyB37Pq7DOSqLRL2UnENgLDPyB3kO0Wo1JMobmXXPEhoqkM/+x9+LaKzeK8pSg1O1LxoVGkbwFvTDuvpdSTN47EwciaW4cebh5qo+G3/PuCjC/5Jd6mZnt1XvMb9nDX76yDFJ8ZP3RoiADJu6r8+SUJLx6/8mXzhtil/rTXOuD0UdfO2tRcpEo5PEvZScQ2AsM/IHeQ7RajUkyhuZdc8SGiqQz/7H34torNBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKlR/7W5EUmHEVxbvY8vlHzMtAERJE5i260cf3Y78xY+l3rnvNh9PNlGr9ZdtGAd1mXCxTs5Fr9Pya4jKBsWtltOQVewWA8xxfzkSmJYLbz5147nWUOghKOTs1A2jSKJkwjFKbdUMkV6gPn+vHX62hjFZm7CDLxqypT4EngiBCzyTwK6d26P235c7wWgBhsYWMlOiNHKl6+fhp4L5J/r/n5+L19VsNqAzklCTkknI4YyjmATPocwcRy5TQN7jQOVwRdL2UnENgLDPyB3kO0Wo1JMobmXXPEhoqkM/+x9+LaKzRBdX5F6ATZ+gDc5KMAd2aS+pg53SY1xfdB7KVeDhst0Bt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKlBV7BYDzHF/ORKYlgtvPnXjudZQ6CEo5OzUDaNIomTCKlif30L4+zatAh+oyOI+YV/URE5LV5xq7Vzk4wCidVVBOnhL7yE6CbJMszp4mQMzhVZDBxic7CSVwi6O4UgsLxC7TIspXynIpDmrh2SLitRsEy61ky6jlNU9gXlCKpYWPXt7IRxx1Yk68QHmmNDJtlqaJ5hV9eavo9ab5RHKFO8DmthcYbgtbMNmiWucAyFgnvnla1Upu4Abk12OwuRFicVXQCVuT2pGu+NZaWXuxJS0UtHe/G3g5UoJ2RzQTfML1HC0F6VPJ8rMoEjSaFs32exOgvyx0GYlsSoZ2FygTTkBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKkG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqdoBST7OKtTNhk4Q0PietmJ6HNZr5r2V6yGFrXvtBaWXp6qO3uwavPgnD3gJZWLfOu1a68HKUsTHh55jG9PNR4oGuGI72I7esOiZzIZEJj3SNAB/4stiQ5oY5OBgO0RkZuuh0sXWD1TttnC9FHb2pxGWEC3UL5nRE9TN/be5PRDE/6kf0SVj2KcPx4SRlMtXDTKvxeJnLNhsPz4BGh5nWb9uLoFYSFRw0Qrnnf7a3Yzlos1eXBHrBKY5p/5MnzvM302IbFpTNgvjbT6iknOeScfzl4qoTotMVgAh6UvGC9OYDgNoX46QkFPkWBIcZvWnau3HcGqhHIL4qpUqjyt4eamP7Mez+/o6f7Au4ucbjdv5mTpUU3ZA+Lh8A98Xb0ZK6g==",
        fromBase58Encoded("5k6Si9jd2Z2qQgt3NvfekHTZ7rAmveaskvSeRyGZA7am"), ""
    );

    var lookupTableMap = tableData.entrySet().stream().collect(Collectors
        .toUnmodifiableMap(Map.Entry::getKey, e -> AddressLookupTable.read(e.getKey(), decoder.decode(e.getValue()))));
    testMultipleLookupTables(skeleton, lookupTableMap);

    lookupTableMap = tableData.entrySet().stream().collect(Collectors
        .toUnmodifiableMap(Map.Entry::getKey, e -> AddressLookupTable.readWithoutReverseLookup(e.getKey(), decoder.decode(e.getValue()))));
    testMultipleLookupTables(skeleton, lookupTableMap);
  }

  private void validateInstructions(final Instruction[] instructions) {
    assertEquals(7, instructions.length);
    assertEquals(createInvoked(fromBase58Encoded("ComputeBudget111111111111111111111111111111")), instructions[0].programId());
    assertEquals(createInvoked(fromBase58Encoded("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")), instructions[1].programId());
    assertEquals(createInvoked(fromBase58Encoded("11111111111111111111111111111111")), instructions[2].programId());
    assertEquals(createInvoked(fromBase58Encoded("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), instructions[3].programId());
    assertEquals(createInvoked(fromBase58Encoded("JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4")), instructions[4].programId());
    assertEquals(createInvoked(fromBase58Encoded("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), instructions[5].programId());
    assertEquals(createInvoked(fromBase58Encoded("11111111111111111111111111111111")), instructions[6].programId());
  }

  @Test
  void legacyToVersioned() {
    final var decoder = Base64.getDecoder();
    final var data = decoder.decode("""
        AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABYuhBEJPdGf0kaeqH56f/7aK+U/Ec0tWc2+BHljvIfd1E1pXpCSdplHTX6G2BqJPxpvh6G4EpRDCD2Kne5cAn2iEHM5ExtMevensyhhO2bkI7a+4cyzrkNYWgZ4zau1R7KbLzBUXF0jFfp1meHwilJu/AwCNj2k1YTACANTwwPeqq0gMYSYkDcfK701J75w4qeVgSRb3wwZ/PoCqCxmXicbEIJVTFNkMPn5bpDWSfJnuc2L8R/U20pWy/GybK8m1VHyzSis0Qa6SY2+IRLfT84BTa3tnFtenAbrzc7FldDIbF+WuFNCEA3wDQXU/2kNDyS5UcQIDRHyTZR32baaJSjKbSZnqeIOG+K8+4h+c/ryF3CIod4oEXQoFbI0gvDV8YOvOSh3ACK4dC6kKiijn3J9CHjGQb5jnv1jfiDrYfiKav5z9b/z3Z7dGWvNSb3cjTV7h+rkHjAg0it6G5rCWbmpLCv+vBOseMKjSOzjOLdp5da7oM2aFQ3pw0ruX4TfQgHGMoYXmQmJuwhKHgAJXXoU8/geTkjl4gw2B20e74WiB5nfsLhf7Ff9NofcPgIyAbMytm5ggTyKwmR+JqgXUXARVRNSWT8GczyVtpf8g4vUv5ghx7OHZeO+hMvWLrOR49KNoh2aSWdVMvcatcojrWtwXATiOw7/o5hE7NFuy3p8vgJc6iy0pEjE+59Webo3DofhMVbFHSRb9h7Io86YTUxc1azFjr6ICF2cAAhccjACcoKx3KWSZ7eOJQPCTicw0xjY25CM9Lm/PEf0eOIWRaFzS+18SFRqS3+P11e3wG8tCBK/gEdWW86T6ShxLivjRUffC3WPRESLEaJZLJU0v5bqT9wav1Y7QI1q+SFBIKYr293ca4P+ZXHXmb4VuvL28nGhnkKOvP2xNzKcC8VaPW8Ne8/dAjPvSwnSTOCIvuuspLXUSrxTAKSwRgdHOPk5zDQkplAxntZycrDPAgOeHn0V8/M9KBCEAejN4fYnIkwNzcVZbO6b1vpI0I2jRL7On0ydT0tsDkEI/SpqJHjq4KzFnbIbtO31EcFiz2AtHgwJAfv9bdqFSz7BvQd9lk+TgpDaFwaJrgDud0vPGVo7xJ5v7udK2WzjZZ/TE1EAKEv3eARbhRCo805JjJIu7m/DBfhpb2OyIl+WHRf8VNjaO9zIQ8CiDUqNbKp0muvUTKONH0sczpiYNW3rPyw0jcqiQE9VjpDsNcrjOdrGVQQtZANXrwabiFf+q4GE+2h/Y0YYwDXaxDncGus7VZig8AAAAAABxtZbBAR902ReqZqo+pqCsPWPt8RjB6haPfOgwzDryDYGp9UXGHvRZjXa1ARV/cLAwSTGjyFWdaXbustfCAAAAAr+HZFnFCLHZcegahE5/2E504D8tCK6ePd4vtU8aX2BBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKkL8CFbqp+UGPdvDzzd0g1Isj/HtQprhpmZS9M3al4PDFJh0UqsxbwO7GNdqHBaH3CjnuNams8L+PIsxs5JAZ16tD/6J/XX9kp0wJsfKVh53ksJqzbfyd1RSzIap7OM5egDBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAA4DaF+OkJBT5FgSHGb1p2rtx3BqoRyC+KqVKo8reHmpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFSlNamSkhBk0k6HFg2jh8fDW13bySu4HkH6hAQQVEjYyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZBHnVW/IxwG7udMVuzmgVB/2xst6j9I5RArHNola8E4+J4GynfqwNbEJKIAA02HIEYGYSMNF/+Ru+6t0aysU1zTP3jk13F84Rhpkk85j1cRjRPkP5aML4+/sMp9J1lVRc48fqxdqu/T5ahS6273skm7uRy6GZqLM+dI6G6UcGDTcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQlAAUCwFwVACUACQMAAAAAAAAAAC0IBxYQHQAnISkQGgKLn+/DwQkAdDukCwAAAC1FBxYQFR0gAC0bKikhISEYFhAPFxUdICoqJCoiEhojAQoPDRQZHxghHCsDGA0XDAgFAiEeHiwmISEoGBMdIA8EFxEGCwkOR3TPAMT8ePMSAHQ7pAsAAAAvAAAAwSCbM0HWnIEHAwAAADoBFAABGWQBAy8BAFAAAwB0O6QLAAAAiTzHvAoAAAABAAAAAAAA
        """.stripTrailing());

    final var tableData = Map.of(
        fromBase58Encoded("HPLCVFcCMgt6mp5uZLo9u8WnqAe2Yan7Sf285fRmitYP"), """
            AQAAAP//////////MlodEgAAAAAAAX0Oo0JAUwU7u9hg90wy8EvD3Icq35pPTtFwwk7g9D7TAAAG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqaEzLekBYJnVDcRo+4sDUSdzyN//x2CGKdya8XNhSXGz1QDIqz/60Khrq19TZTHG3V5isGJtM83t34Lq1+7FDkYa7gfNUelGbm9nvRpLziBVdMFGvxxvSinKl2EQTujXI15StXvuVljWBwPZWMMhJjowv69r7Tkr01q9PGLXnmlihhy5zB2Wim3TKc2GXu65Jx/eZttpIs1wzSgassoPvT1BV7BYDzHF/ORKYlgtvPnXjudZQ6CEo5OzUDaNIomTCGk9uOpaRs0gUbG64nkCxy3Fi0h5UI73qiYzeE2ZTFE/S9lJxDYCwz8gd5DtFqNSTKG5l1zxIaKpDP/sffi2is2VY8NHFn4fieorX8pXZkSESQCOceZLQ/Fi3JkuguQH9Qbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCp3Bq/VjtAjWr5IUEgpivb3dxrg/5lcdeZvhW68vbycaHbkIz0ub88R/R44hZFoXNL7XxIVGpLf4/XV7fAby0IEnP1v/Pdnt0Za81JvdyNNXuH6uQeMCDSK3obmsJZuaks/W3ahUs+wb0HfZZPk4KQ2hcGia4A7ndLzxlaO8Seb+4L8CFbqp+UGPdvDzzd0g1Isj/HtQprhpmZS9M3al4PDAan1RcYe9FmNdrUBFX9wsDBJMaPIVZ1pdu6y18IAAAABt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKlpXpCSdplHTX6G2BqJPxpvh6G4EpRDCD2Kne5cAn2iEEFXsFgPMcX85EpiWC28+deO51lDoISjk7NQNo0iiZMIb9MHxJDRnGxK2C4ebN++7hNCHzp78+PnI0h6A8ehXZw1ljVdeIJ9inPN1CpDGWm8xYsaO0XPbNs1fJHC9d2z+d+oHo2TyIV/oP1RAOPbDkD7fbCtF/IEMZ35281g/b3NS9lJxDYCwz8gd5DtFqNSTKG5l1zxIaKpDP/sffi2is0G3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqeGEQSrFXDz0uwSSXXV00mX16ofrhj0E4UIsdhHV+9SZQVewWA8xxfzkSmJYLbz5147nWUOghKOTs1A2jSKJkwgG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqUvZScQ2AsM/IHeQ7RajUkyhuZdc8SGiqQz/7H34torNt5XqsB2uJhJ9UywR/MpI+Q0DDwuLZjcoVn1usv0CX/bO0PQM7CmjYOGxgdjY1gE2zbDEVf1lEhlG+zFX3YP96Qbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpCCXkPXOPWxcMtp8wyv0O1S5tExtEPZ85s3WVp5T9vy4E6eEvvIToJskyzOniZAzOFVkMHGJzsJJXCLo7hSCwvLYIfQYerau9tZxvIstjYmVxmnqmsIZs/zmk9feoofyzKTzIl9/Izcy+Lq+ptKvIe+Zp14Xjl1YKi0Fg/8JQwxLUuZNc84uJv+ODHLPVxPjflGuoRQRPw0QBowKTmmL6vAbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpUoUw9BsRsub3yQssztfWFo8PzISMYqvqPLXGq0B8wirmhc3QVEiNucOe7OMcZXWdWyHSUq1dZ/Kk/Nu3TyaLLz8HUhoITASFAyl7h1ycDnwQCIHhZ+25gghOtdXLtsv8snDWf6mMUc8CEwUTWJYrrzV0K+1ZydlEXpwNDIXHzZEGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAXtTLJk4uAIm0+2UmFI8vlvJSYKWKvh9yCzN+BUt2NetHRpl9OZV6vripnLcO7Ld05eWTaxgJ7fMfpcx4nk4E9CEloY8z02YBdxDUM2HlsnlEwRfN7Ku3hKcjaHYDLDyC0FXsFgPMcX85EpiWC28+deO51lDoISjk7NQNo0iiZMIS9lJxDYCwz8gd5DtFqNSTKG5l1zxIaKpDP/sffi2is0G3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqZX9cLvDVvLe2MtUrxIXnma5UbmvDfFLBMQn7nIA8Q5hBt324e51j94YQl285GzN2rYa/E2DuQ0n/r35KNihi/x8uF+6u4/4Xewo4ei3du+5rmp7iv6hCm3aHD23EfmHPXcbdcbDeHitFQX4Co8+pnN6L2Tor9Rmk0+ZYWOxuVv6pA24RQeT3TPrXH4Dbg18qqRPSzgh1gY5ZXmjKO7S39MGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAUvZScQ2AsM/IHeQ7RajUkyhuZdc8SGiqQz/7H34torNep8BxIzCHTTNLr6rzpmzI5RnDP0jwdUP3Zz2TO6klcxBV7BYDzHF/ORKYlgtvPnXjudZQ6CEo5OzUDaNIomTCM1MBqvun+VIzW/gJ/1H+NNORKe32zcqsj/P70yq3Veoo0ynTzeDqIMbISSVi/firdQKPsIDzn/+vXBxndhB1NJy1+M5RzWPtZ9+hMH6759UnGnJMU8DoIugm+aNwHL93UFXsFgPMcX85EpiWC28+deO51lDoISjk7NQNo0iiZMICZYQaIXPd8i9c0mVKPIifBPfOK/5ZwlUNNVrI915pEAG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqUvZScQ2AsM/IHeQ7RajUkyhuZdc8SGiqQz/7H34torNBt324e51j94YQl285GzN2rYa/E2DuQ0n/r35KNihi/wyc74iu7d5xuMMFMBjIa57yehK1PRGKx6eLqHNqBrgI43S6TRycjPKslVCSdPd+NexpNqfZxVN+0IaR3hJiIMZ1QDIqz/60Khrq19TZTHG3V5isGJtM83t34Lq1+7FDkbiW8JT20ltc6Gto7f1DTTI5qagX9hWwWJueuhguddGba8nx5yP26HwvyxkTR4e8fRE3D4M3VGVFAuKnKNQLc5GS88HdfiyEcOiQ4FuMtIk3CT4L009nsI9lfJf6mOhXWcGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAWwMhgNyHeU3ZZzWbnp9dCIr4qoCbQisxOpWTp7s1jhJMBQocGIsB58b3rI0S19xRcU5aTSAJAB/2PI/2rMyFw0G3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqQVUCo48EuMoBmnVclxFZhbg5WUAx66mHQYLwMNcZ2rx
            """.stripTrailing(),
        fromBase58Encoded("5m2LUxvFW8zBq4baKUCnsC9zK7FSCEeLPoi1CsLBB4dQ"), """
            
            """.stripTrailing(),
        fromBase58Encoded("EKLG5tLAdC5q26qk2Xj58j4EeT2shhZadmQpq6Gxjme8"), """
            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
            """.stripTrailing()
    );

    var skeleton = TransactionSkeleton.deserializeSkeleton(data);
    assertFalse(skeleton.isVersioned());
    assertTrue(skeleton.isLegacy());

    final var lookupTableMetas = tableData.entrySet().stream()
        .map(entry -> AddressLookupTable.read(entry.getKey(), decoder.decode(entry.getValue())))
        .map(LookupTableAccountMeta::createMeta)
        .toArray(LookupTableAccountMeta[]::new);

    final var transaction = Transaction.createTx(
        skeleton.feePayer(),
        Arrays.asList(skeleton.parseLegacyInstructions()),
        lookupTableMetas
    );

    assertEquals(0, transaction.version());
    assertTrue(transaction.serialized().length < data.length);
  }

  @Test
  void testReuseOfTableMetas() {
    final var decoder = Base64.getDecoder();
    final var ixData = decoder.decode("""
        dM8AxPx48xIAdDukCwAAAC0AAADBIJszQdacgQECAAAAJmQAAS0FEQAAAGQBAgB0O6QLAAAAOTstNgkAAAABAAAAAAAA
        """.stripTrailing()
    );

    final var tableData = Map.of(
        fromBase58Encoded("8UDjScEFpaXQLNqEVDByLAJZUncwx8mnNUGqQLMd58MR"), """
            
            """.stripTrailing(),
        fromBase58Encoded("DH8wtF4c15CkHXhmXZwMckDmn6ywWFzpaVR6QuurGEWq"), """
            
            """.stripTrailing()
    );

    final var accounts = new String[]{
        "B9MB2Q3dv4HNYSjqdvP9fdsqkAytduREQ5bXTEQmyk28",
        "FHhXetnafCigKi1URmFvoP8wuvH6wKwwZgx4KY9XtfJi",
        "7FhcaZcAoVAyKTpH1pDGfttUyA61iax9JRZVZxbjAg6p",
        "35i8cHM2zMMhPrPhkL2Vk3KenQxkmiTLg5YdeNzTA3UG",
        "So11111111111111111111111111111111111111112",
        "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
        "9tXtD8knBqNzBNEH7P8jQcvkUUwkU7ogSWciNYdftLeg",
        "GLAMbTqav9N9witRjswJ8enwp9vv5G8bsSJ2kPJ4rcyc",
        "8szGkuLTAux9XMgZ2vtY39jVSowEcpBfFfD8hXSEqdGC",
        "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
        "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
        "2MFoS3MPtvyQ4Wh4M9pdfPjz6UhVoNbFbGJAskCPCj3h",
        "FHhXetnafCigKi1URmFvoP8wuvH6wKwwZgx4KY9XtfJi",
        "7FhcaZcAoVAyKTpH1pDGfttUyA61iax9JRZVZxbjAg6p",
        "H1qQ6Hent1C5wa4Hc3GK2V1sgg4grvDBbmKd5H8dsTmo",
        "HASEPj6RZ7FXkYJwgHtenj3MpmQQfYVyNakAbhuiW86E",
        "35i8cHM2zMMhPrPhkL2Vk3KenQxkmiTLg5YdeNzTA3UG",
        "So11111111111111111111111111111111111111112",
        "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
        "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
        "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
        "D8cy77BBepLMngZx6ZukaTff5hCt1HrWyKk3Hnd9oitf",
        "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
        "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo",
        "8iibPkw7zbNHMPcihHeBgcL7rDnHteZb2NfvTy8bNm7d",
        "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo",
        "B8Xd8JbArDnGizyJbNLjBzxnKk1ftXLwsbKzPHiDUmgE",
        "DTrYjBcWzdvv88mshsafvnKyJ4aEWbyAXW9edmV4b5pS",
        "H1qQ6Hent1C5wa4Hc3GK2V1sgg4grvDBbmKd5H8dsTmo",
        "yQ7wB9CppNoyezbdp5UK8t4BzaYoenLpu7H86Lnykud",
        "5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm",
        "So11111111111111111111111111111111111111112",
        "7SxuRRqTFiWYDzuLwDx7ibjfefXDkt7VUV5WbYiNy646",
        "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo",
        "2MFoS3MPtvyQ4Wh4M9pdfPjz6UhVoNbFbGJAskCPCj3h",
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
        "D1ZN9Wj1fRSUQfCjhvnu1hqDMT7hzjzBBpi12nVniYD6",
        "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo",
        "FJ6R7CW3ZZjGdvv7T3WeEVzAM3WMBKbJdgWo76nGZqQP",
        "4ePkeSGkERRmQ8axSpjAetqpRy718wxHPWVa7HKkui7A",
        "APLsyFnxW1kbVTj7B5paF71zrzgwD235aXg8LDrCxdJU",
        "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
        "5ocnV1qiCgaQR8Jb8xWnVbApfaygJ8tNoZfgPwsgx9kx",
        "2MFoS3MPtvyQ4Wh4M9pdfPjz6UhVoNbFbGJAskCPCj3h",
        "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
        "HASEPj6RZ7FXkYJwgHtenj3MpmQQfYVyNakAbhuiW86E",
        "yQ7wB9CppNoyezbdp5UK8t4BzaYoenLpu7H86Lnykud",
        "5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm",
        "8HH4LtXZod9AsNj7TpHAMmwVL9aJdQ6kSLATohqS9ufR",
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
        "AYhux5gJzCoeoc1PoJ1VxwPDe22RwcvpHviLDD1oCGvW",
        "Gb7m4daakbVbrFLR33FKMDVMHAprRZ66CSYt4bpFwUgS",
        "4poUr2pTjTbBdbk9YvGcscQrJZrTutgGAPXGQnE1gpax",
        "mare3SCyfZkAndpBRBeonETmkCCB3TJTTrz8ZN2dnhP",
        "FMbUjYFtqgm4Zfpg7MguZp33RQ3tvkd22NgaCCAs3M6E",
        "8szGkuLTAux9XMgZ2vtY39jVSowEcpBfFfD8hXSEqdGC",
        "MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD",
        "4PQH9YmfuKrVyZaibkLYpJZPv2FPaybhq2GAuBcWMSBf",
        "f1tUoNEKrDp1oeGn4zxr7bh41eN6VcfHjfrL3ZqQday",
        "DpWzqkAVNjgdiLCDVy1M3XWGBPjJ11h177kNX8NywYNE",
        "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4"
    };

    final var accountKeys = Arrays.stream(accounts)
        .map(PublicKey::fromBase58Encoded)
        .map(AccountMeta::createWrite)
        .toList();

    final var swapIx = Instruction.createInstruction(
        PublicKey.fromBase58Encoded("GLAMbTqav9N9witRjswJ8enwp9vv5G8bsSJ2kPJ4rcyc"),
        accountKeys,
        ixData
    );

    final var wrapAccounts = new String[]{
        "B9MB2Q3dv4HNYSjqdvP9fdsqkAytduREQ5bXTEQmyk28",
        "FHhXetnafCigKi1URmFvoP8wuvH6wKwwZgx4KY9XtfJi",
        "7FhcaZcAoVAyKTpH1pDGfttUyA61iax9JRZVZxbjAg6p",
        "So11111111111111111111111111111111111111112",
        "9tXtD8knBqNzBNEH7P8jQcvkUUwkU7ogSWciNYdftLeg",
        "11111111111111111111111111111111",
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
        "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
    };

    final var wrapAccountKeys = Arrays.stream(wrapAccounts)
        .map(PublicKey::fromBase58Encoded)
        .map(AccountMeta::createWrite)
        .toList();

    final var wrapSolIx = Instruction.createInstruction(
        PublicKey.fromBase58Encoded("GLAMbTqav9N9witRjswJ8enwp9vv5G8bsSJ2kPJ4rcyc"),
        wrapAccountKeys,
        decoder.decode("GgKLn+/DwQkAdDukCwAAAA==")
    );

    final var lookupTableMetas = tableData.entrySet().stream()
        .map(entry -> AddressLookupTable.read(entry.getKey(), decoder.decode(entry.getValue())))
        .map(LookupTableAccountMeta::createMeta)
        .toArray(LookupTableAccountMeta[]::new);

    final var transaction = Transaction.createTx(
        PublicKey.fromBase58Encoded("9tXtD8knBqNzBNEH7P8jQcvkUUwkU7ogSWciNYdftLeg"),
        List.of(wrapSolIx, swapIx),
        lookupTableMetas
    );

    final var transaction2 = Transaction.createTx(
        PublicKey.fromBase58Encoded("9tXtD8knBqNzBNEH7P8jQcvkUUwkU7ogSWciNYdftLeg"),
        List.of(wrapSolIx, swapIx),
        lookupTableMetas
    );

    assertArrayEquals(transaction.serialized(), transaction2.serialized());
  }
}
