package software.sava.core.tx;

import org.junit.jupiter.api.Test;
import software.sava.core.accounts.PublicKey;
import software.sava.core.accounts.lookup.AddressLookupTable;
import software.sava.core.accounts.meta.AccountMeta;
import software.sava.core.accounts.meta.LookupTableAccountMeta;

import java.util.*;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static software.sava.core.accounts.PublicKey.fromBase58Encoded;
import static software.sava.core.accounts.meta.AccountMeta.*;

final class TransactionSerializationTests {

  @Test
  void testVariableLengthIxLength() {
    final byte[] data = Base64.getDecoder().decode("""
        ATgc2Iye/GlwnpSeIytu+tYkb2A+5VJhc1yui59+7/PMQSuywEqpb3k8wHCKnupEuC5fDTUjvGhASTEH5c90UACAAQAFEU4rs4al2vatnKR6MtsLLzl+Q24T1Y5kkYBmPhrq9O/VzcyvadLTPMXTLHJ2IKteqvqoQAgRH4dVHOW+cw1EkNOJB31VpbsTMHY+t2f1XsB3tBoNB1994dc/uso8Y9VUcRCcPGXQaDMBtOvEnG0Lyr4Lf68erOMMjG6weDn4HuIS6tSjkUAFDNLqypEZqieck8DZMKBobFJb3fYlMJjWpjHvHv25qj1olz/ZenFlAVmw6stGZYC5aF5nQ9ZqQr8vxXTXpuq5/UeOzPqvqL7sJuBwFgO//vEZG9uw6edrxAd2vInnwNHlA4uvk7TwFNJd9xWnndlfBJ5f9fX36m+JwJ9fAlkt3jAFytFpv8wnPC/6I0tpd+F+Bw3UOdTTA8X8HR7XL/DvxwiqYIadWSBAIms1hbo9KoaOYES91ZtNIF/jeSWG+N64PtIqGyqU3OdPOEd0TTjj79CJx+HICgFkwRrNq0B12gG6uYd+a79dybCsJPRSedzSl8R6nwJYXSLJGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjJclj04kifG7PRApFI4NgwtaE5na/xCEBI572Nvp+FkDBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAJWBt/6PKcF0R86zH0ytUdAc7K5LbdbpdsVcWwvkMUGK86EED9glv4WMHdJchvP2ZZvDPQq6PniaYqUsrsmZ94ETjVRi2k6UWSxzbmoMl/cGeYhlpwGEqRE3YD3BBue3swYOAAUCgE8SAA4ABQEAAAIADgAJAyKiAAAAAAAADwYdDAABFg0IllUsHJUO0hoPHQACAwwREhMUARUWFx0eGBkEHxogGxwFBgcICQoLigEyEHMzqHo5LQIAAAACAAAAAAECAAAAAgEDAAAABBIAAAAEBQQGBwIICQoLBAAMDA0ODxABCQAAABEMEhMUFQgCAAQSAAAABBYEFxgCCAoJGQQADAwNGhscCAAAABAnTB2IE8QJ6ANkAAoAAQC0ZeZpAAAAAFDDAAAAAAAAAAAAAAAAAAAAAAAAAAAQAB9Qb3dlcmVkIGJ5IGJsb1hyb3V0ZSBUcmFkZXIgQXBpAonsVzlUh3H7+XOmaklk0KWZm+wt34ECwzGrxcB6Sb7VCQRLSE8FSUpRTgQMAgsHmoTIVF9hkZWFmpxCqc8zcavo9Yu6S8ysQBz59/7iw1ADVllVAA==""");
    final var skeleton = TransactionSkeleton.deserializeSkeleton(data);
    final var instructions = skeleton.parseInstructionsWithoutTableAccounts();
    assertEquals(6, instructions.length);
    var ix = instructions[5];
    assertEquals("HQ2UUt18uJqKaQFJhgV9zaTdQxUZjNrsKFgoEDquBkcx", ix.programId().publicKey().toBase58());
    assertEquals(31, ix.len());

    final var lookupTables = skeleton.lookupTableAccounts();
    assertEquals(2, lookupTables.length);
    var tableAccount = lookupTables[0];
    assertEquals("AHPsnG22z2BwdeURWWPPQzLYRb6jT9PPDXzQ3hMF7hNc", tableAccount.toBase58());
    tableAccount = lookupTables[1];
    assertEquals("BQBDhjQ32VYzNzXW8vViqpuLiz2TAYcW1cVZDAL4Hf67", tableAccount.toBase58());
  }

  private void testMultipleLookupTables(final TransactionSkeleton skeleton,
                                        final Map<PublicKey, AddressLookupTable> lookupTableMap) {
    lookupTableMap.values().forEach(table -> assertTrue(table.isActive()));

    final var accountMetas = skeleton.parseAccounts(lookupTableMap);

    assertEquals(44, accountMetas.length);
    final var feePayer = accountMetas[0];
    assertEquals(createFeePayer(fromBase58Encoded("Ee7oGQLorSg8tapxb4ym7Y7vAZUuYHMZEgC6boQQJrcP")), feePayer);
    assertEquals(createWrite(fromBase58Encoded("7u7cD7NxcZEuzRCBaYo8uVpotRdqZwez47vvuwzCov43")), accountMetas[1]);
    assertEquals(createInvoked(fromBase58Encoded("11111111111111111111111111111111")), accountMetas[13]);
    assertEquals(createInvoked(fromBase58Encoded("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")), accountMetas[17]);
    assertEquals(createRead(fromBase58Encoded("BQ72nSv9f3PRyRKCBnHLVrerrv37CYTHm5h3s9VSGQDV")), accountMetas[18]);
    assertEquals(createRead(fromBase58Encoded("EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v")), accountMetas[20]);
    assertEquals(createWrite(fromBase58Encoded("4Ep5XNqaDYbFAQHHdhtFXgaPuhDH6uajSG8ZfwxHzwBQ")), accountMetas[21]);
    assertEquals(createWrite(fromBase58Encoded("E4W3xuwX692AuEjx35hKXwk4YZVpvsd2bZdkMvX4TuAR")), accountMetas[34]);
    assertEquals(createRead(fromBase58Encoded("2wT8Yq49kHgDzXuPxZSaeLaH1qbmGXtEyPy64bL7aD3c")), accountMetas[35]);
    assertEquals(createRead(fromBase58Encoded("So11111111111111111111111111111111111111112")), accountMetas[43]);

    final var instructions = skeleton.parseInstructions(accountMetas);
    validateInstructions(instructions);

    final var lookupTableMetas = Arrays.stream(skeleton.lookupTableAccounts())
        .map(lookupTableMap::get)
        .map(LookupTableAccountMeta::createMeta)
        .toArray(LookupTableAccountMeta[]::new);

    final var transaction = Transaction.createTx(feePayer, Arrays.asList(instructions), lookupTableMetas);
    assertEquals(skeleton.version(), transaction.version());
    assertEquals(skeleton.numSigners(), transaction.numSigners());

    final var instructions2 = transaction.instructions();
    assertEquals(instructions.length, instructions2.size());

    transaction.setRecentBlockHash(skeleton.base58BlockHash());
    final var serializedTx = transaction.serialized();

    final var skeleton2 = TransactionSkeleton.deserializeSkeleton(serializedTx);
    assertEquals(skeleton.base58BlockHash(), skeleton2.base58BlockHash());
    assertEquals(skeleton.version(), skeleton2.version());
    assertEquals(skeleton.numSigners(), skeleton2.numSigners());

    final var accountMetas2 = skeleton2.parseAccounts(lookupTableMap);
    assertEquals(feePayer, accountMetas2[0]);
    assertEquals(
        Arrays.stream(accountMetas)
            .sorted(Comparator.comparing(AccountMeta::publicKey))
            .toList(),
        Arrays.stream(accountMetas2)
            .sorted(Comparator.comparing(AccountMeta::publicKey))
            .toList()
    );

    final var accounts = Arrays.stream(instructions)
        .map(Instruction::accounts)
        .flatMap(List::stream)
        .toList();
    final var accounts2 = instructions2.stream()
        .map(Instruction::accounts)
        .flatMap(List::stream)
        .toList();
    assertEquals(accounts, accounts2);

    final var instructions3 = skeleton2.parseInstructions(accountMetas2);
    validateInstructions(instructions3);

    assertEquals(instructions2, Arrays.asList(instructions3));

    final var accounts3 = Arrays.stream(instructions3)
        .map(Instruction::accounts)
        .flatMap(List::stream)
        .toList();
    assertEquals(accounts, accounts3);
  }


  @Test
  void testMultipleLookupTables() {
    final var decoder = Base64.getDecoder();
    final byte[] txData = decoder.decode("ARRw8IKW5g68p4JJly8WK0FeERS1fM8oT768hiqhTUrPKVHA4J3MBvvwB66GG89jl9y58uuLU/d/n5feDm4zQwWAAQAIFcqqGywepKTH2miwSZYlM16b9eL6wOUsHXTJaN/PC3HgZn/LU4VSNrEZJg9hJjEvfwMjmNLCvJDpEyG0zH7Y1yRxM32R3yvnX/HBzojB9fApPOfuRWL27j4EX6B/qtMR3XhSHLF5zruFibVWotXslNJJhoL9+bsq9a1k5JHMQVPajH0GWPl/GBdrvsyAB5oM/DmI+Zim1wtJQfiwcEBhFzuUgNyv8Vh5jpvncwqzug9EmaNqS45ePcJKtUQiZPlalJsmP4XXkRUa4+mVUmtqiwBVOG/QonNYNeS6dAGAu/3DqrPZuTBfiy3tOi8VNLMXUE+81x/vGukWDpnYFI3QNg+w7x9VxI11rNstskEtkvrc5QLhZQOukJJeNJk94SA2P7NrsyJHdN8r61t9/sUBVZUA442cNIW1DRpGPYY4a2gc1iOzs8gYW9R6p6JGvSdImG/6cHUvETiJ/1E3vnj4qH3YZtww6EGz12R/jfuL2SSQ+eiarZ25MhB4xt6Laek7DtrMTZNG4CL8qwpNHlcIBHj7kn2An7H7CibSAoGDAb+EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAAR51VvyMcBu7nTFbs5oFQf9sbLeo/SOUQKxzaJWvBOPBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKmMlyWPTiSJ8bs9ECkUjg2DC1oTmdr/EIQEjnvY2+n4WZqAC/9MhzaIlsIPwUBz6/HLWqN1/oH+Tb3IK6Tft154tD/6J/XX9kp0wJsfKVh53ksJqzbfyd1RSzIap7OM5ejG+nrzvtutOj1l82qryXQxsbvkwtL24OR8pgIDRS9dYb3DM82VQy2lvZ9Qvf6uHNlQm3hqNgBIjxRpPlzIfSsyBw4ABQIVkgYAEQYACwArDRABAQ0CAAsMAgAAAOgqAAAAAAAAEAELAREPQhASAAsCAQorFAwPEw8oISgfIAIJKisiKBIQECkoBwYFDygeKBsaCQgqJx0oEhAQKSgEHA8jJBYSCAEVFxgZECYmJSzBIJszQdacgQIDAAAAJmQAASZkAQIZZAID6CoAAAAAAADPBgAAAAAAAEYAFBADCwAAAQkNAgADDAIAAADoAwAAAAAAAAP0NIJPcZr9hSIT6pDVuJOcbRK/6LTNqsuEbqKZDXrYfgVgWl5iWwRhY19dkmh5SwRhhBKoWpjF2AJWdmNKtd10oVa1ARee8ZKsxDUFPj88QBcEFjsYPUZ44JFRsIq/hqRW5K1MXfzQWSrJGK/c9uGPL+lhu51GBD9CPT4BLg==");
    final var skeleton = TransactionSkeleton.deserializeSkeleton(txData);

    assertEquals("DmkhBgQnEMFRou2j5qYUvXvvv46pBwaCcbTXPAu5HYZP", skeleton.base58BlockHash());

    final Map<PublicKey, String> tableData = Map.of(
        fromBase58Encoded("HSGvDUXpsitvzxwKfFGuUXDqkwwmHKuKFefKZrihWwXs"), "",
        fromBase58Encoded("ArWvRMTGQwouxpVd38MZnTJoCxJP6Y8SE6dyQzTJYe5r"), "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",
        fromBase58Encoded("5k6Si9jd2Z2qQgt3NvfekHTZ7rAmveaskvSeRyGZA7am"), ""
    );

    var lookupTableMap = tableData.entrySet().stream().collect(Collectors
        .toUnmodifiableMap(Map.Entry::getKey, e -> AddressLookupTable.read(e.getKey(), decoder.decode(e.getValue()))));
    testMultipleLookupTables(skeleton, lookupTableMap);

    lookupTableMap = tableData.entrySet().stream().collect(Collectors
        .toUnmodifiableMap(Map.Entry::getKey, e -> AddressLookupTable.readWithoutReverseLookup(e.getKey(), decoder.decode(e.getValue()))));
    testMultipleLookupTables(skeleton, lookupTableMap);
  }

  private void validateInstructions(final Instruction[] instructions) {
    assertEquals(7, instructions.length);
    assertEquals(createInvoked(fromBase58Encoded("ComputeBudget111111111111111111111111111111")), instructions[0].programId());
    assertEquals(createInvoked(fromBase58Encoded("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")), instructions[1].programId());
    assertEquals(createInvoked(fromBase58Encoded("11111111111111111111111111111111")), instructions[2].programId());
    assertEquals(createInvoked(fromBase58Encoded("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), instructions[3].programId());
    assertEquals(createInvoked(fromBase58Encoded("JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4")), instructions[4].programId());
    assertEquals(createInvoked(fromBase58Encoded("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), instructions[5].programId());
    assertEquals(createInvoked(fromBase58Encoded("11111111111111111111111111111111")), instructions[6].programId());
  }
}
