def getAppVersion = { ->
  try (final var gitTagOut = new ByteArrayOutputStream()) {
    exec {
      commandLine 'git', 'tag', '--points-at', 'HEAD'
      standardOutput = gitTagOut
    }
    final var tagName = gitTagOut.toString().strip()
    if (tagName.isBlank()) {
      try (final var gitHashOut = new ByteArrayOutputStream()) {
        exec {
          commandLine 'git', 'rev-parse', '--short', 'HEAD'
          standardOutput = gitHashOut
        }
        return 'git-' + gitHashOut.toString().strip()
      }
    } else {
      return tagName
    }
  }
}

ext {
  VERSION = getAppVersion()
  VCS_URL = 'https://github.com/sava-software/sava'
}

final JLV = JavaLanguageVersion.of(project.findProperty('jv') as Integer ?: 23)

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  project.group = 'software.sava'
  project.version = "$VERSION"

  plugins.withType(JavaPlugin).configureEach {
    java {
      modularity.inferModulePath = true
      toolchain {
        languageVersion = JLV
      }
    }
  }

  repositories {
    maven {
      url = "https://maven.pkg.github.com/comodal/json-iterator"
      credentials {
        username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
        password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
      }
    }
    mavenCentral()
  }

  dependencies {
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  }

  test {
    useJUnitPlatform()
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
      showStandardStreams true
    }
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        groupId project.group
        artifactId project.parent.name + '-' + project.name
        version = project.version

        from components.java

        pom {
          name = project.parent.name + '-' + project.name
          description = "Solana Java Core & RPC SDK"
          url = "$VCS_URL"
          licenses {
            license {
              name = 'MIT License'
              url = 'https://github.com/sava-software/sava/blob/main/LICENSE'
            }
          }
          developers {
            developer {
              name = 'Jim'
              id = 'jpe7s'
              email = 'jpe7s.salt188@passfwd.com'
              organization = 'Sava Software'
              organizationUrl = 'https://github.com/sava-software'
            }
          }
          scm {
            connection = 'scm:git:git@github.com:sava-software/sava.git'
            developerConnection = 'scm:git:ssh@github.com:sava-software/sava.git'
            url = "$VCS_URL"
          }
        }
      }
    }
    repositories {
//      maven {
//        name = "GithubPackages"
//        url = "https://maven.pkg.github.com/sava-software/sava"
//        credentials {
//          username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user.write")
//          password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.token.write")
//        }
//      }
      maven {
        name = "MavenCentral"
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        credentials {
          username = System.getenv("OSSRH_USER") ?: project.findProperty("ossrhUsername")
          password = System.getenv("OSSRH_PASS") ?: project.findProperty("ossrhPassword")
        }
      }
    }
  }

  signing {
    sign publishing.publications.mavenJava
  }
}
